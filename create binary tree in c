#include <stdio.h>
#include <stdlib.h>

struct node {
  int item;
  struct node* left;
  struct node* right;
};
void inorder(vector<int>A,int i){
    if(i>=A.size()||A[i]==-1){
        return;
    }
    inorder(A,2*i+1);
    cout<<A[i];
    inorder(A,2*i+2);
}

// // Inorder traversal
// void inorderTraversal(struct node* root) {
//   if (root == NULL) return;
//   inorderTraversal(root->left);
//   printf("%d ", root->item);
//   inorderTraversal(root->right);
// }

// // Preorder traversal
// void preorderTraversal(struct node* root) {
//   if (root == NULL) return;
//   printf("%d ", root->item);
//   preorderTraversal(root->left);
//   preorderTraversal(root->right);
// }

// // Postorder traversal
// void postorderTraversal(struct node* root) {
//   if (root == NULL) return;
//   postorderTraversal(root->left);
//   postorderTraversal(root->right);
//   printf("%d ", root->item);
// }

// // Create a new Node
// struct node* create(int value) {
//   struct node* newNode = malloc(sizeof(struct node));
//   newNode->item = value;
//   newNode->left = NULL;
//   newNode->right = NULL;

//   return newNode;
// }

// // Insert on the left of the node
// struct node* insertLeft(struct node* root, int value) {
//   root->left = create(value);
//   return root->left;
// }

// // Insert on the right of the node
// struct node* insertRight(struct node* root, int value) {
//   root->right = create(value);
//   return root->right;
// }

int main() {
//   struct node* root = create(1);
//   insertLeft(root, 4);
//   insertRight(root, 6);
//   insertLeft(root->left, 42);
//   insertRight(root->left, 3);
//   insertLeft(root->right, 2);
//   insertRight(root->right, 33);

// // C++ implementation of tree using array
// // numbering starting from 0 to n-1.
// #include<bits/stdc++.h>
// using namespace std;
// char tree[10];
// int root(char key) {
//   if (tree[0] != '\0')
//     cout << "Tree already had root";
//   else
//     tree[0] = key;
//   return 0;
// }
 
// int set_left(char key, int parent) {
//   if (tree[parent] == '\0')
//     cout << "\nCan't set child at "
//     << (parent * 2) + 1
//     << " , no parent found";
//   else
//     tree[(parent * 2) + 1] = key;
//   return 0;
// }
 
// int set_right(char key, int parent) {
//   if (tree[parent] == '\0')
//     cout << "\nCan't set child at "
//     << (parent * 2) + 2
//     << " , no parent found";
//   else
//     tree[(parent * 2) + 2] = key;
//   return 0;
// }
 
// int print_tree() {
//   cout << "\n";
//   for (int i = 0; i < 10; i++) {
//     if (tree[i] != '\0')
//       cout << tree[i];
//     else
//       cout << "-";
//   }
//   return 0;
// }
 
// Driver Code
int main() {
  node('A');
  set_left('B',0);
  set_right('C', 0);
  set_left('D', 1);
  set_right('E', 1);
  set_right('F', 2);
  print_tree();
  return 0;
}

//   printf("Traversal of the inserted binary tree \n");
//   printf("Inorder traversal \n");
//   inorderTraversal(root);

//   printf("\nPreorder traversal \n");
//   preorderTraversal(root);


//   printf("\nPostorder traversal \n");
//   postorderTraversal(root);

}
