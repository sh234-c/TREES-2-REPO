// ARRAY REPESENTATION OF BINARY TREE
#include <stdio.h>
int complete_node=15;
char Tree[]={'\0','D','A','F','E','B','R','T','G','Q','\0','\0','V','\0','J','L'};
int get_right_child(int index){
    if(Tree[index]!='\0' && ((2*index)+1)<=complete_node)
    return (2*index)+1;
    return -1;
}
int get_left_child(int index)
{
    // node is not null
    // and the result must lie within the number of nodes for a complete binary tree
    if(Tree[index]!='\0' && (2*index)<=complete_node)
        return 2*index;
    // left child doesn't exist
    return -1;
}
void inorder(int index)
{
    // checking for valid index and null node
    if(index>0 && Tree[index]!='\0')
    {
        inorder(get_left_child(index)); //visiting left subtree
        printf(" %c ",Tree[index]); //visiting root
        inorder(get_right_child(index)); // visiting right subtree
    }
}
int main(){
        printf("\nInorder:\n");
    inorder(1);
    return 0;
}
